/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Objective as PrismaObjective,
  Skill as PrismaSkill,
} from "@prisma/client";

export class ObjectiveServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ObjectiveCountArgs, "select">
  ): Promise<number> {
    return this.prisma.objective.count(args);
  }

  async objectives(
    args: Prisma.ObjectiveFindManyArgs
  ): Promise<PrismaObjective[]> {
    return this.prisma.objective.findMany(args);
  }
  async objective(
    args: Prisma.ObjectiveFindUniqueArgs
  ): Promise<PrismaObjective | null> {
    return this.prisma.objective.findUnique(args);
  }
  async createObjective(
    args: Prisma.ObjectiveCreateArgs
  ): Promise<PrismaObjective> {
    return this.prisma.objective.create(args);
  }
  async updateObjective(
    args: Prisma.ObjectiveUpdateArgs
  ): Promise<PrismaObjective> {
    return this.prisma.objective.update(args);
  }
  async deleteObjective(
    args: Prisma.ObjectiveDeleteArgs
  ): Promise<PrismaObjective> {
    return this.prisma.objective.delete(args);
  }

  async getSkill(parentId: string): Promise<PrismaSkill | null> {
    return this.prisma.objective
      .findUnique({
        where: { id: parentId },
      })
      .skill();
  }
}
