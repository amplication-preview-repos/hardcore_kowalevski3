/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Manager as PrismaManager } from "@prisma/client";

export class ManagerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ManagerCountArgs, "select">): Promise<number> {
    return this.prisma.manager.count(args);
  }

  async managers(args: Prisma.ManagerFindManyArgs): Promise<PrismaManager[]> {
    return this.prisma.manager.findMany(args);
  }
  async manager(
    args: Prisma.ManagerFindUniqueArgs
  ): Promise<PrismaManager | null> {
    return this.prisma.manager.findUnique(args);
  }
  async createManager(args: Prisma.ManagerCreateArgs): Promise<PrismaManager> {
    return this.prisma.manager.create(args);
  }
  async updateManager(args: Prisma.ManagerUpdateArgs): Promise<PrismaManager> {
    return this.prisma.manager.update(args);
  }
  async deleteManager(args: Prisma.ManagerDeleteArgs): Promise<PrismaManager> {
    return this.prisma.manager.delete(args);
  }
}
