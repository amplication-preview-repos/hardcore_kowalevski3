/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Formation as PrismaFormation,
  Skill as PrismaSkill,
} from "@prisma/client";

export class FormationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FormationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.formation.count(args);
  }

  async formations(
    args: Prisma.FormationFindManyArgs
  ): Promise<PrismaFormation[]> {
    return this.prisma.formation.findMany(args);
  }
  async formation(
    args: Prisma.FormationFindUniqueArgs
  ): Promise<PrismaFormation | null> {
    return this.prisma.formation.findUnique(args);
  }
  async createFormation(
    args: Prisma.FormationCreateArgs
  ): Promise<PrismaFormation> {
    return this.prisma.formation.create(args);
  }
  async updateFormation(
    args: Prisma.FormationUpdateArgs
  ): Promise<PrismaFormation> {
    return this.prisma.formation.update(args);
  }
  async deleteFormation(
    args: Prisma.FormationDeleteArgs
  ): Promise<PrismaFormation> {
    return this.prisma.formation.delete(args);
  }

  async getSkill(parentId: string): Promise<PrismaSkill | null> {
    return this.prisma.formation
      .findUnique({
        where: { id: parentId },
      })
      .skill();
  }
}
